Student Guide
https://cted.cybbh.io/tech-college/pns/public/pns/latest/guides/bash_sg.html
####################################
CRWA-M-507


Day 1
------------------------------------
TLOs:
Be able to look at code and identify what the code does or what the output should be
Be able to solve simple problems by creating code
------------------------------------

Processes and memory (ps, kill, killall, pkill, top)
commands: cat, more, or less
finding files and directories (locate, whereis, which, find) (Use find a lot)
commands: grep and cut

------------------------------------
SHELL - A sell is a macro processor that executes commands.
1. Command Interpreter
2. Programming language
Interactive vs non-interactive (Interactive is command input)(DCO mostly uses non-interactive)
------------------------------------
Linux commands and switches
cat /etc/passwd ()

ctrl-a - brings cursor to the beginnning
ctrl-e - brings cursor to the end
ctrl-u - erases the line
ctrl-c - starts a new line
ctrl-r - search bar for keywords of commands
ctrl-l - creates a new screen that you can scroll back up from
shift-G - will go to the last line of a man page
shift-g - will go to the first line of a man page
/ - searches in a man page
n - brings you to the next search after searching a man page
shift-n - brings you to the previous search in a a man page
q - quits man page

linux.die.net/man/ ----- Online man page for linux

man pages - provide syntax and specifications for commands in the shell

Commands
######################################
pwd - print working directory
touch - create a file in linux (vim, nano, vi also work)
touch -t -- changes time and date of files
mkdir -p -- makes a directory inside of another directory (directory and subdirectory)
rm - removes
rmdir - removes directory (-p removes directories and subdirectories, -rf forces it to be removed)
ls - lists the contents of a directory (-l shows in a list format, -a shows hidden files)
* - wildcard character
cp - copy (path:destination)
mv - move
ln - creates a link (-s symbolic)
echo - print
find - finds, pretty fucking self explanatory

Find
Very important command in linux
find 'location of where to look' 'what you want to look for
find $home -name new.sh (looks in the home directory for anything that has new.sh in it)
-name is case sensitive
-iname is not case sensitive
find -size (finds the size of a file)
find / -group root (looks in the root directory, everything that belongs to the root group)
find $home -user student (looking for anything in the home directory that belongs to student)
-maxdepth (max depth will define how many levels deep in the file system to search when using find)
find / -type <d f p l> (searches the root directory for the type of file, d is directory, f is for files, p is for pipes, l is for symbolic links)
-exec will run a command with the find command (example -exec ls -l will list out the contents)
find / -type d -iname log -exec ls -l {} \; 2>/dev/null (\ is the termination point for the exec switch)(prints all of the name that have log)
-exec ls -l {} \; (syntax purely for the above command that will cause the command to not work without that portion)
find / -atime (looks at accessed time of files, by default will look according to days)
find / -mmin (looks at files based on the timeframe, in minutes with this switch)
find / -executable ! -type d (looks for all files that are executable and not directories)
find /var/log -iname *.log 2>/dev/null -printf "%i %f\n" | more (looks in var/log for case insensitive files that end in .log, throws away all of the errors and prints inode number and filename)

grep
can utilize grep to compare files
cat /etc/passwd | grep /bin/bash (shows the file where it was found)
cat /etc/passwd | grep -C 3 student (-C is the context flag, shows the 3 lines before and 3 lines after the grep was found)
cat /etc/passwd | grep -v /bin/bash (-v inverts the results, shows everything that does not have a match)
-n shows the line number
grep 'root' /etc/passwd (finds root in /etc/passwd)
-A is a context flag, only shows after the hit was found
-B is a context flag, shows before the hit was found
egrep allows regex as strings
egrep -o shows the result and after if specified but not before
egrep "student|root|ROOT" /etc/passwd (looks for student, root, or ROOT and shows the whole line where it was found)
grep -E is the grep version of egrep

Hard link vs symbolic link

Symbolic link
Acts like a dynamic link, gets deleted if the original file gets deleted, can exists across multiple devices

Hard link
A hard link is a more static link, only exists in the system it is created in, does not get deleted if the original gets deleted

BRACE EXPANSION
Do whatever command we want, multiple times

touch file{1..5} (creates files 1-5 in the same location)
touch log{1..5}.txt (creates log.txt 1-5)

Processes
ps aux(shows all processes that are running on the system and what user is using the process)
  -u shows the processes being used by the specified user

Cut command
Changes standard output
Relies on character deliminator, default is tab
tail /etc/passwd | cut -d: -f1 (shows the first word (field) of each of the lines that would be diplayed on tail /etc/passwd)

Command Chaining operators
& - background runs a process
; - run multiple commands in one
\ - type larger command in multiple lines
&& - logical AND
|| - logical OR
! - NOT
| - PIPE

Day 2
###############################################
Aliases
cp - copy
mv - move
set an alias by alias='nano' (everytime vim is run nano is run instead)
alias x='cat /etc/passwd' (typing x will cat the file)
alias -p (lists out all the aliases on the system)
unalias vim (removes the alias for vim)

Command Substitution
cat $(find . -name "*.sh") (for every sh file found, cat it)
a =$(cat /etc/passwd)
$a (does not work)
echo $a (cats the /etc/passwd file and prints it on the screen)

Conditionals
if [[ condition ]]; then
      commands
elif [[ condition ]]; then
      commands
else
      commands
fi

-e (file exists ?)
-f (file exists and is a regular file?)
-d (file exists and is a directory?)
-s (file exists and is NOT empty?)
-x (file exists and is executable?)
-w (ile exists, and IS writable by me?)
-gt > (greater than)
-lt < (less than)
-ge (greater than or equal to)
-le (less than or equal to)
-eq (integers) == (strings) (is equal to)
-ne != is NOT equal to)

SED
String editor
similar to cut, allows you to change things in the output
dont use -i for the tests and classroom, will use -i in the fleet if using this shit at all
cat password | sed 's/telnetd/TELNETD' password (sed ('s/text wanted to replace/replacement' file that is being changed))
's/text/text/g' g = global, will change all instances of the word that you are replacing
cat password | sed '/location/d'
cat password | sed -e '/xrdp/d' -e '/telnetd/d' deletes all instances in the file but not permanently

AWK
cat hosts | awk -F: '{print $1}' (delimites by a colon much like the cut command and printing the first field, $1 = first field, -F is a field seperator)
cat hosts | awk -F: 'BEGIN {OFS="&"}{print $1,$3}' (seperates the 1st and 3rd field by an & sign, OFS stand for output field seperator)
$NF - number of fields (prints the last field in lines, regardless of the amount of fields it has)
cat password | awk -F: '($3>= 100){print$0}' (creates a conditional for the awk, if field 3 is greater than or equal to 100 print the entire line)
cat password | awk -F: '($3 >= 100)&&($4 <= 1000){print $0}' (if field 3 is greater than or equal to 100 and field 4 is less than or equal to 1000 print the entire line)
cat hosts | awk -F: -v "awkuser=$user" -v "awkoffice=$office" 'BEGIN {OFS=":"} {$2=awkuser}{$4=awkoffice}{print$0}' (replaces the fields mentioned with variables that have been made)
(-v is used to input variables)

SORT
tail password | awk -F: '{print $3}' | sort -n (sorts based on ASCII table by default, -n is sorting by alphanumerical value, -r is reversed)
cat password | awk -F: '{print$1}' | sort | uniq -c (-c will tell you amount of instance, sorts the output and then does not print duplicates, prints 1 instance of each occurrence)
use uniq after using sort or it will not work properly
sort -u (does the same as uniq but does not have a count like uniq)

Day 3
---------------------------------------------------

Parameter is the same thing as variable
variabe_name = value
$variable_name -- calls a variable
expr -- does math
c = $(expr $a - $b)
echo $c

$* -- The positional parameters, starting from one.

$@ -- The positional parameters, starting from one.

$# -- The number of positional parameters.

$? -- The exit status of the previous command.

$- -- The current option flags of the shell.

$$ -- The process ID of the shell.

$! -- The process ID of the most recent background job.

$0 -- $0 is set to the name of the script.

$_ -- First command in a script, is the path/name of the script as invoked.
Otherwise, it is the last parameter passed to the most recent command.


finctions
myfunc() {
    commands
    more commands
}
#call the function
myfunc

demo 1 
var1 = 'A'
var2 = 'B'
myfunc() {
    local var1='c'
    var2='D'
    echo "Inside function car1: $var1 $var2: $var2" 
}
echo "Before executing function var1;$var1 var2:$var2"
myfunc
echo "after executing function var1:$var1 var2:$var2

variable substitustion
a='5'
b='10'
c='0'
echo 'Bash is only $1 days long"
echo "BASH should be $2 days long"
echo 'I wish I spent $3 days in bash'
./bash.sh 5 10 0 --outputs
Bash is only 5 days long
Bash should be 10 days long
I wish I spent 0 days in bash

md5sum exists and gets you the md5 hash

Day 4
-------------------------------------------
variable callbacks ($variable name)

Looping
x=0 
while [[ $x -le 10 ]] ; do
    echo $x
    x=$(($x+1)) (Double parenthesis means to execute arithmatically)
done

for x in {0..10}; do
    echo $x    (Same code as above)
done

for x in {cosc, jcac, mct, 'san diego'}; do
    echo $x
done

for x in $(cat list); do
    echo $x    (Prints the list that was made)
done

#!/bin/bash
for x in $(cat /etc/passwd | awk -F: '{print $1}')
    do echo $x is a user on this computer
done

x=0
while [[ $x -le 10 ]] ; do
    echo $x
    x=$(($x+1))
done

#!/bin/bash

for a in 1 2 3 4 5 6 7 8 9 0
do
    #If a is equal to 5 then break the loop
    if [ $a == 5 ]
    then
        break
    fi
    #Print the value
    echo "Iteration no $a"
done

which, route OR ip route, tar, zip

Test Review
----------------------------------------------
cut command
delimiters
cat /etc/passwd | cut -d: -f1- (-f1- prints all fields, -f1 prints the first field)

cut -d: -f1 /etc/passwd (does the same as cat and pipe)

sort
sort -nr -k4 (numeric and reversed sorting on the 4th column)

grep
grep -v -o -r -i -E (-v is for inverse -o is for only -r is recursively -i is or case insensitive -E is for regex)

find
find /home/student -name -iname -type f,p,d -mtime -exec COMMAND -OPTIONS {} \; (-name will find certain names -iname will find inode number -type finds by a type -mtime finds by modified time searching by days same for atime and ctime, accessed time and created time -exec executes COMMAND against every object)
                                                   -exec COMMAND -OPTIONS {} + (executes COMMAND against everything all at once)

tar
tar -c (create)
    -v (verbose)
    -f (file)
    -z (gzip)

word count
wc -l

remove/delete
rm (delete files)
rmdir (delete directories)

touch
touch -d ("2020-09-19 09:00:00" FILE)
      -t ( [[CC]YY]MMDDhhmm[.ss] FILE )

killing
kill -9
pkill
killall

if statements
if [[ <CONDITION> ]]; then
      commands
elif [[ <CONDITION> ]]; then
      commands
fi







































































































CTFd Activities
-------------------------------------------------
1. Using Brace-Expansion, create the following directories within the $HOME directory:

    1123
    1134
    1145
    1156

mkdir 11{23,34,45,56}

1.2. Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. Make the following files, but utilze Brace Expansion to make all nine files with one touch command.

Files to create:

    1.txt
    2.txt
    3.txt
    4.txt
    5.txt
    6~.txt
    7~.txt
    8~.txt
    9~.txt

cd 1123
touch {1..5}.txt {6..9}~.txt

1.3. Using the find command, list all files in $HOME/1123 that end in .txt

find $HOME -name '*.txt'

1.3b. List all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.

find $HOME/1123 -name '*.txt' | grep -v '~'

2. Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

find $HOME/1123 -name *.txt -exec cp $HOME/1123/{1..5}.txt $HOME/CUT \;

3. Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines.

find /var -empty -printf "%i %f\n" -type f,d

4. Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline. Ensure unneeded output is not visible.

find / -inum 4026532575 -printf '%f\n'

5. 
    Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.

ls -l $HOME/CUT | cut -d' ' -f9 | cut -d'.' -f1- -s > $HOME/CUT/names

6. Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them uniquely by number of times they appear.

cat StoryHiddenIPs | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq -c | sort -nr

7. 
    Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
    Only display those that use /bin/bash as their default shell.
    The input file is named $HOME/passwd and is located in the current directory.
    Output the results to a file called $HOME/SED/names.txt

awk -F: '($3 > 3)&&($NF=="/bin/bash"){print$1}' $HOME/passwd > $HOME/SED/names.txt

8. 
    Find all dmesg kernel messages that contain CPU or BIOS (uppercase) in the string, but not usable or reserved (case-insensitive)
    Print only the msg itself, omitting the bracketed numerical expressions ie: [1.132775]

dmesg | grep "CPU\|BIOS" | grep -i -v "usable\|reserved" | cut -d] -f2-

9. 
    Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
    Output of this command should go to the screen/standard output.
    You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.

a=$(openssl passwd -1 -salt bad4u Password1234)
awk -F: -v "awka=$a" 'BEGIN{OFS=":"}{$2=awka}{print$0}' $HOME/PASS/shadow.txt

10. Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.

cat $HOME/passwd | sed '\/bin\/sh\|\/bin\/false/d' > $HOME/PASS/passwd.txt

11. 
    Using find, find all files under the $HOME directory with a .bin extension ONLY.
    Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
    Ensure there is no trailing / at the end of the directory path when outputting to standard output.
    You may need to sort the output depending on the command(s) you use. Have each path displayed only once.

find $HOME -type f -name '*.bin' | awk -F/ 'BEGIN {OFS="/"} {$NF"";NF--; print}' | sort -u

12. 
    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

#!/bin/bash
user=$2
ugid=$3
default='/bin/bash'
homedir="/home/"$2
tail -1 $1 | awk -F: -v "awku=$user" -v "awkugid=$ugid" -v "awkhome=$homedir" -v "awkshell=$default" 'BEGIN {OFS=":"}  {$1=awku} {$3=awkugid} {$4=awkugid} {$6=awkhome} {$NF=awkshell} {print $0}' >> $1

13. 
    Find all executable files under the following four directories:
        /bin
        /sbin
        /usr/bin
        /usr/sbin
    Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

command=$(find /bin /sbin /usr/sbin /usr/bin -type f -executable | sort | head -10 | tail -1)
md5sum $command | cut -d/ -f1

14. Using any BASH command complete the following:

    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entry’s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.

command=$(sort -n -t':' -k4 /etc/passwd | head -10 | tail -1 | cut -d: -f6)
echo "$command" | md5sum | cut -d- -f1

15. 
    Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
    Your script should:
        Exclude file type named pipes. These can break your script.
        Redirect STDOUT and STDERR to separate files.
        Determine the count of files hashed in the file with hashes.
        Determine the count of unsuccessfully hashed directories.
        Have both counts output to the screen with an appropriate title for each count.

a=$(find /bin /etc /var -maxdepth 3 ! -type p 2>/dev/null)
md5sum $a > success.txt 2>fails.txt
hash=$(grep -c '/' success.txt)
unhash=$(grep -c 'directory' fails.txt)
echo 'Successfully Hashed Files:' $hash
echo 'Unsuccessfully Hashed Directories:' $unhash

alternate answer for 15

mkdir $HOME/demo/demo2
find /bin /etc /var -maxdepth 3 ! -type p -exec md5sum {} > $HOME/demo/demo2/success 2>$HOME/demo/demo2/fails \;
a=$(wc -l $HOME/demo/demo2/success | awk '{print$1}')
b=$(grep -c "Is a directory" $HOME/demo/demo2/fails)
if [[ "$a" ]];
    then
          echo "Successfully hashed files: $a";
          echo "Unsuccessfully hashed directories: $b";
    else
          echo "oops";-maxdepth 3
fi

16. Design a script that detects the existence of directory: $HOME/.ssh

    Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
    Upon un-successful detection, displays the error message "Run ssh-keygen" to the user.

if [[ -d $HOME/.ssh ]]; then
    cp -a $HOME/.ssh $HOME/SSH
else
    echo 'Run ssh-keygen'
fi

17. 
    Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
        NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no arguments/switches.
    Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution. HINT: man which
    Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
    Evaluate the response as being either successful or failure, and print an appropriate message to the screen.

pin=$(which ping)
upid=$(ip route | awk '/default/ { print $3 }')
count=$($pin -c 6 $upid | grep from* | wc -l)
if [[ $count -eq 0 ]]; then
        echo "failure";
else
        echo "successful";
fi

18. 
    Create the following files in a new directory you create $HOME/ZIP:
        file1 will contain the md5sum of the text 12345
        file2 will contain the md5sum of the text 6789
        file3 will contain the md5sum of the text abcdef
    Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
        HINT: "Junk" the paths
    Utilize tar on $HOME/ZIP/file.zip to archive it into a file called $HOME/ZIP/file.tar.gz which should not include directories. Use the gzip option in tar, DO NOT use a seperate gzip binary.
        HINT: You might need an option to change directories first.

mkdir $HOME/ZIP/
echo 12345 | md5sum | cut -d' ' -f1 > $HOME/ZIP/file1
echo 6789 | md5sum | cut -d ' ' -f1 > $HOME/ZIP/file2
echo abcdef | md5sum | cut -d' ' -f1> $HOME/ZIP/file3
cd $HOME/ZIP
zip -j file.zip file1 file2 file3
tar -cvzf file.tar.gz file.zip

19. Utilize Bash looping to iteratively create each user account and their directories.

    Design a basic FOR Loop that iteratively alters the file system and user entries in a passwd-like file for new users: LARRY, CURLY, and MOE.
    Each user should have an entry in the $HOME/passwd file
    The userid and groupid will be the same and can be found as the sole contents of a file with the user's name in the $HOME directory (i.e. $HOME/LARRY.txt might contain 123)
    The home directory will be a directory with the user's name located under the $HOME directory (i.e. $HOME/LARRY)
        NOTE: Do NOT use shell expansion when specifying this in the $HOME/passwd file.
    The default shell will be /bin/bash
    The other fields in the new entries should match root's entry
    Users should be created in the order specified



20. 
    Write a bash script that will find all the files in the /etc directory, and obtains the octal permission of those files. The stat command will be useful for this task.
    Depending how you go about your script, you may find writing to the local directory useful. What you must seperate out from the initial results are the octal permissions of 0-640 and those equal to and greater than 642, ie 0-640 goes to low.txt, while 642 is sent to high.txt.
    Have your script uniquely sort the contents of the two files by count, numerically-reversed, and output the results, with applicable titles, to the screen. An example of the desired output is shown below.
        NOTE: There is a blank line being printed between the two sections of the output below.

finding=$(find /etc -type f)
octal=$(stat --format='%n: %a' $finding| cut -d: -f2)
for i in $octal; do
        if [[ i -ge 642 ]]; then
                echo $i >> high.txt
        elif [[ i -le 640 ]]; then
                echo $i >> low.txt
        fi
done
echo 'Files w/ OCTAL Perm Values 642+:'
cat high.txt | sort | uniq -c | sort -nr
echo ''
echo 'Files w/ OCTAL Perm Values 0-640:'
cat low.txt | sort | uniq -c | sort -nr

ALTERNATE SOLUTION
find /etc -type f -exec stat -c '%a' {} \; > ./perms 2>/dev/null (%a is octal value)

for x in $(cat ./perms); do
      if [[ $x -le 640 ]]; then  
            echo "$x" >> low.txt
      elif [[ $x -ge 642 ]]; then
            echo "$x" >> high.txt
      fi
done

echo "Files w/ Octal Perm Values 642+:"
cat high.txt | sort | uniq -c | sort -nr
echo
echo "FIles w/ Octal Perm Values 0-640:"
cat low.txt | sort | uniq -c | sort -nr
































































































































