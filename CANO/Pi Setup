rpi-imager
sudo apt install rpi-imager
Debian Bookworm (the first one that appears on the list)
When done imaging, insert SD into the pi
Use USB-C to hook up the pi to the battery power
Connect pi to GLiNet router via ethernet
Go to web browser and type 192.168.8.1
Identify the IP of the pi using the clients tab
After identifying the IP of the pi, ssh into the pi (ssh pi@IPADDRESS)
password = raspberry (or what you set in the imager)
Update and upgrade software from Raspbian
sudo apt update ; sudo apt upgrade -y

Configure the Operating System
sudo raspi-config
1-S3 Change Password
1-S4 Change Hostname
3-I1 Enable SSH
5-L1 Set Locale (set US for both)
5-L2 Change Timezone 
5-L4 Set WiFi Country (Japan)
6-A1 Expand Filesystem
6-A2 Interface Names (No)

Finish
Reboot

On laptop Create SSH keys that can be used for secure login to the pi (ensure that the path to the file created matches the filepath in the prompt) ***DONT INPUT A FILENAME***
ssh-keygen -b 4096
Transfer the keys to the pi:
ssh-copy-id pi@192.168.8.196(IPADDRESS)
Test the ssh key to ensure you can now ssh without being prompted for a password
ssh pi@192.168.8.196(IPADDRESS)
make a backup of the key in case you accidentally delete the original
cp ~/.ssh/id_rsa(FILENAME) id_rsa.bak(FILENAME.bak)

on the pi
we can modify the ssh configuration to harden it and make the remote more secure
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
sudo vim /etc/ssh/sshd_config
make the following modifications: (delete the # that comments the lines out)
AddressFamily inet
PermitRootLogin no
PasswordAuthentication no

restart the ssh Daemon to read the changes you just made:
sudo systemctl restart sshd

On pi
Install wireguard program
sudo apt install wireguard resolvconf -y

On laptop 
send the wireguard config that you created to the pi
sudo scp -i ~/.ssh/id_rsa(PREVIOUSFILENAME(keygenfile)) /etc/wireguard/pi-wg0.conf pi@192.168.8.196(IPADDRESS):~

On pi
Move the wireguard config to the correct loaction on the pi
sudo cp pi-wg0.conf /etc/wireguard

on pi
manually bring up the wireguard and test the connection by pinging the VPN server
sudo wg-quick up pi-wg0
ping 10.0.0.1

set the wireguard to automatically start on the Pi on boot
sudo systemctl enable wg-quick@pi-wg0

Configure Cellular Modem
Install LTE hat software on pi by first downloading a SixFab installer script from github
sudo apt install git
git clone https://github.com/sixfab/SixFab_PPP_Installer.git
cd SixFab_PPP_Installer
make the installer executable and run it
chmod +x ppp_install.sh
sudo rm /usr/lib/python3.11/EXTERNALLY-MANAGED(Bookworm specific)
sudo ./ppp_install.sh

Configure the cellular modem
Select option 6
Input the APN for your cellular provider:
  fast.t-mobile.com (for t-mobile)
  broadband (for AT&T)
  h2g2 (for GoogleFi)
Select no for username
enter ttyUSB3 for device serial port
select Yes for autoconnect
press Enter for reboot

Ensure that you have a ppp0 interface once your modem sees the internet
ifconfig
if no ppp0, disable the ModemManager and reboot
sudo systemctl disable ModemManager.service
sudo reboot

Test the modem by pinging google through the ppp0 interface
ping -I ppp0 8.8.8.8

Finish configuring cellular modem via minicom program
sudo apt install minicom
sudo minicom --baudrate 115200 --device /dev/ttyUSB2

Run the following AT commands in minicom: ('CTRL-A' then 'z' then 'e' will show text as it is typed)
at+cops? - provides network information
at+csq - Provides RSSI value for network
at+qgps? - Provides GPS state
at+qgps=1 - Turns on GPS
at+qgpscfg="autogps",1 - Turns on GPS at boot

'CTRL+a' and then 'x' - Exits minicom

On pi
----
Install GPS Software
sudo apt install gpsd gpsd-clients

Edit gpsd config file so the Pi can listen to the GPS stream which is pushed over ttyUSB1
sudo vim /etc/default/gpsd

Define the serial port that is providing GPS to the operating system
START_DAEMON="true"
Devices="/dev/ttyUSB1"

After saving, restart the GPS Daemon
sudo systemctl restart gpsd

On laptop
Modify the ssh config to create and SSH alias
sudo vim ~/.ssh/config

On pi
Turn the on-board wifi off at boot
sudo vim /boot/firmware/config.txt
Add the following at the bottom
dtoverlay=disable-wifi

on pi
gpsmon or cpgs, terminal based gps
should see traffic at the bottom of the interface
if no traffic is being shown run (sudo systemctl restart gpsd)
if still nothing, restart pi and check connections
if still nothing, check position of pi and gps device (could be in a bad area with no proper coverage)






