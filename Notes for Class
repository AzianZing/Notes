windows_opstation - 192.168.65.10, 10.50.43.194
linux-opstation - 192.168.65.20, 10.50.37.61

Day 0 Setup
###########################################
https://cctc.cybbh.io/students/students/latest/Day_0_Setup

Activities
##########################################
git clone 

Handbook
###########################################
https://git.cybbh.space/programming/python/public/-/blob/master/activities/Python_Student_Handbook/PyStuHBK.adoc?ref_type=heads

----------------------------------------------------------------------------------------------------

Day 1

Email splitting activity
############################################
#!/usr/bin/env python3

email = 'student@usmc.mil'
splitted = email.split('@')
joined = '.'.join(splitted)
final = joined.split('.')
print(final)

############################################

##Python Scripts##
chmod +x "filename"
#!/usr/bin/env "filename"

----------------------------------------------------------------------------------------------------

Day 2

Branching
###########################################
#!/usr/bin/env python3 
mewtwo == 150

if mewtwo == 150:
  print('This is a MewTwo!')
elif mewtwo == 151:
  print('This is NOT a Mew!')
elif mewtwo < 150;
  print('This might be a ditto.')
else:
  print('This is NOT a MewTwo!')

Branching Activity (Fizzbuzz)
##########################################
#!/usr/bin/env python3
 
number = int(input('Enter a number:'))

if number % 5 == 0 and number % 3 == 0:
  print ('fizzbuzz')
elif number % 5 == 0:
  print ('buzz')
elif number % 3 == 0:
  print ('fizz')
else:
  print (number)

While statements
#########################################
#!/usr/bin/env python3
 
 def guess_number(n):
     while True:
         x = int(input('Enter a number between 0 and 100: '))
 
         if x > n:
             print('too high')
             continue
         if x < n:
             print('too low')
             continue
         if x == n:
             print('WIN')
             break
guess_number(23)

while True:
  print('Infinity')


while True: is an infinite loop
########################################
For loops and Range
########################################
party = ['Mario', 'Luigi', 'Princess Peach', 'Bowser', 'Gumba', 'Big Chomp']
for i in party:
  print(i)

Will print each 'word'(iterable) of the list 

list(range(0,10,1))
  [range(start, stop, step)
  [stop stops after the number, for example stopping at 100 requires 101 to be in the stop place]

for c in range(4, 32, 6)
  print(c)
[will print 4, 10, 16, 22, 28]

Play Game while loop with actions
#########################################
#!/usr/bin/env python3

def playGame():
    while(True):
        action=input("Action: ")
        if action == 'help':
            print ("N S E W help quit")
            continue
        elif action == 'quit'or action == 'exit':
            print('Thanks for playing')
            break
        elif action =='North':
            pass
        else:
            print('Please try help')
playGame()
##########################################


Format Command
##########################################
use format(a, '0>8b') to show binary to show all 8 bits
[00101010]
##########################################


Inverting Activity
##########################################
for n in range(0, len(l)):
    l[n] = str(255 - int(l[n]))
    print(l)
Inverts a list in a range
___________________________________________
counter = 0
    for num in l:
        l[counter] = str(255-int(num))
        counter += 1'''

    '''enumerate()
        for count,num in enumerate(l):
            l[count] = str(255-int(num))
'''
Additional ways to invert a list in a range
___________________________________________
result = []
    for n in range(0, len(l)):
        result.append(str(255 - int(l[n])))
    print(result)
    return result
Takes a list and inverts it, then prints it out
___________________________________________

TypeCasting
###########################################
list(string name) to change string into a list
Ex. list(fish) will change fish to a string

to change a list to a string stringname = list(fish)
Ex. bigFish = list(fish) will make a new string that is the same as the original string named fish

bigFish[0] = 's' changes the first item in a list to an 's'
Ex. [f,l,o,u,n,d,e,r] now becomes [s,l,o,u,n,d,e,r]

''.join(bigFish) will join a list back into a string that prints as slounder
biggerFish = ''.join(bigFish) will create a variable that prints slounder

For loops
###########################################
fish = 'flounder'
for i in fish: \\Iterations can be any variable (i,x,c,e,etc.)//
  print(x)
f
l
o
u
n
d
e
r

fish = 'flounder'
for i in fish: \\Iterations can be any variable (i,x,c,e,etc.)//
  if i == 'f':
    print(x)
  elif i == 'e':
    print(x)
f
e

While statements
###########################################
fish = 'flounder'
while False:
  for x in fish:
    if x == 'f':
      print(x)
    elif x == 'e':
      print(x)
\\Will not print anything//
fish = 'flounder'
while True:
  for x in fish:
    if x == 'f':
      print(x)
    elif x == 'e':
      print(x)
f
e
\\Will print infinitely until stopped//

fish = 'flounder'
while False:
  for x in fish:
    if x == 'f':
      print(x)
    elif x == 'e':
      print(x)
  break
f
e
\\Stops loop after printing//

Dictionary
####################################
romanNumerals = {'I':1, 'V':5, 'X':10, 'L':50}
\\Will create a variable that is a dictionary, setting the values attached to the 'variables' in the brackets//

romanNumerals['C'] = 100
\\Adds a value of 100 to the 'variable' C that adds to the current dictionary//

del romanNumerals['C']
\\Deletes 'variable' and value that are attached to C//

romNum = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
print(romNum)

\\Prints the variable romNum to check if the variable works//

romNum = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
for key in romNum:
  print('{} = {}'.format(key, romNum[key]))('{} = {}'.format())
I = 1
V = 5
X = 10
L = 50
C = 100
D = 500
M = 1000
\\Prints the 'keys' of the variable romNum//

Comments in coding
#########################################
# = single line of code
''' = multiple lines of code

Steganography
#########################################
msg = 'a'
ord(msg) = 97
\\ord() gives ordinal value of a string or ASCII,
The opposite of ord is char ex. chr(97) = 'a'//
format(ord(msg), '0>8b') = 01100001
\\formats number or variable into a binary value//

Steganography Activity
##########################################
#!/usr/bin/env python3

def steg_encode_char(char, cover):
    charbin = format(ord(char), '0>8b')
    for index in range(0,len(cover)):
        coverbinl = list(format(int(cover[index]), '0>8b')) \\Converts the items from a list (cover) into an integer, formats it as  binary and then converts it to a list//
        coverbinl[-1] = charbin[index]
        cover[index] = str(int(''.join(coverbinl),2)) \\Converts the list into base 2, joins it at the spaces and returns it to a string. //

    pass

def steg_decode_char(stego):
    msgbits = []
    for b in stego:
        msgbits.append(bin(int(b))[-1]) \\Converts a list into integers for each item in the function as the last index of the selected item and then converts it back into binary//
    return chr(int(''.join(msgbits),2))

if __name__ == '__main__':
    pass

File IO
#########################################
r = read
w = write
a = append
x = creation only
r+ = read and write
t = text mode
b = binary mode

fp = open("test.txt) \\Opens an already created file//
fp.close() \\Closes a file//

with open('test.txt', 'w') as fp: \\Opens test.txt with write permissions//
  fp.write('first line\n') \\Writes to test.txt when opened "first line"//
  lines = ['Second line\n', 'Third line\n', 'Fourth line\n', Last line\n']
  fp.writelines(lines) \\Writes the list of lines above into the file//

with open('test.txt') as fp:
  fp.read(10) \\Reads 10 bytes of data(characters)//\\When using fp.read() it returns the characters as strings//
  fp.readlines() \\Reads all lines//\\Lists returned when using readlines vs a string returned when using read//

  for line in fp:
    print(line, end='') \\Prints all lines with new line breaks (\n)//

Activity
------------------------------------------
1.   with open('travel_plans.txt', 'r') as fp:
        strings = fp.read()
        num = len(strings)
     with open('travel_plans.txt', 'r') as fp:
        num = len(fp.read()) 
2.   with open('emotion_words.txt', 'r') as fp:
        num_read = fp.read()
        num_split = num_read.split()
        num_words = len(num_split)
     with open('emotion_words.txt', 'r') as fp:
        num_words = len(fp.read().split()) \\Reads, splits and checks length in one line//
3.   with open('school_prompt.txt', 'r') as fp:
        strings = fp.readlines()
        num_lines = len(strings)
     with open('school_prompt.txt', 'r') as fp:
        num_lines = len(fp.readlines())
4.   with open('school_prompt.txt', 'r') as fp: \\Returns the first 30 characters//
        beginning_chars = fp.read(30)
     with open('school_prompt.txt', 'r') as fp:
        beginning_chars = fp.read()[:30]
5.   three = []
     with open('school_prompt.txt', 'r') \\Assigns the third word of every line to a list called three//
        for i in fp.readlines():
          three.append(i.split()[2])
6.   with open('emotion_words.txt', 'r') as fp: \\Assigns the first word of every line to a string called emotions//
        emotions = [line.split()[0] for line in fp]
     emotions = []
     with open('emotion_words.txt', 'r') as fp:
        for line in fp.readlines():
          emotions.append(line.split()[0])
emotions = [line.split()[0] for line in open('emotion_words.txt')] \\List comprehension method for the same outcome//
7.   with open('travel_plans.txt', 'r') as fp:
        first_chars = fp.read(33)
8.   p_words = []
     with open('school_prompt.txt', 'r') as fp: \\If 'p' is in a word then it is added to a list called p_words//
        lines = fp.read()
        for i in line.split():
          if 'p' in i:
            p_words.append(i)
     p_words = []
     with open('school_prompt.txt', 'r') as fp: \\Nested for loop that adds words that have a 'p' to a list called p_words//
        for line in fp:
          for word in line.split():
            if 'p' in word:
              p_words.append(word)

Args and Kwargs
##########################################
*args allows a variable amount of arguments in a function for example if you make a calculator you can add multiple values together
*kwargs allows named keywords with arguments

Python Practice Exam 1
###########################################
Question 1
-------------------------------------------
def q1(floatstr):

    TLO: 112-SCRPY002, LSA 3,4
    Given the floatstr, which is a comma separated string of
    floats, return a list with each of the floats in the 
    argument as elements in the list.

  newlist = []
  for y in floatstr.split(','):
    newlist.append(float(y))
  return newlist

return [float(x) for x in floatstr.split(',')]                  \\List comprehension version of the same lines//

Question 2
-------------------------------------------
def q2(*args):

    TLO: 112-SCRPY006, LSA 3
    TLO: 112-SCRPY007, LSA 4
    Given the variable length argument list, return the average
    of all the arguments as a float

  s = 0
  for arg in args:                                            \\Takes each arg in the args and adds them together and then divides them by the amount of args//    
    s+= arg
  return s/len(args)

  return sum(args)/len(args)                                  \\Shortest possible way to achieve outcome//

Question 3
--------------------------------------------
def q3(lst,n):    

    TLO: 112-SCRPY004, LSA 3
    Given a list (lst) and a number of items (n), return a new 
    list containing the last n entries in lst.

  return lst[-n:]                                            \\Returns the last index value of the list//


Question 4
--------------------------------------------
def q4(strng):
    
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY006, LSA 3
    Given an input string, return a list containing the ordinal numbers of 
    each character in the string in the order found in the input string.

  newlist = []
  for i in list(string):
    newlist.append(ord(i))                                  \\Iterates through list and gives all ordinal values and returns the new list//
  return newlist

  return [ord(x) for x in strng]                            \\List comprehension of the lines above//

Question 5
--------------------------------------------
def q5(strng):
    
    TLO: 112-SCRPY002, LSA 1,3
    TLO: 112-SCRPY004, LSA 2
    Given an input string, return a tuple with each element in the tuple
    containing a single word from the input string in order

  return tuple(strng.split)                                \\Splits the string and returns it as a tuple without having to change the string//

Question 6
---------------------------------------------
def q6(catalog, order):
    
    TLO: 112-SCRPY007, LSA 2
    Given a dictionary (catalog) whose keys are product names and values are product
    prices per unit and a list of tuples (order) of product names and quantities,
    compute and return the total value of the order.

    Example catalog:
    {
        'AMD Ryzen 5 5600X': 289.99,
        'Intel Core i9-9900K': 363.50,
        'AMD Ryzen 9 5900X': 569.99
    }

    Example order:
    [
        ('AMD Ryzen 5 5600X', 5), 
        ('Intel Core i9-9900K', 3)
    ]

    Example result:
    2540.45 

    How the above result was computed:
    (289.99 * 5) + (363.50 * 3)

  total = []
  for key in catalog:
    for item in order
      if item[0] == key:
        total.append(catalog[key] * item[1]
  return sum(total)



  return sum(catalog[product] * quantity for product,quantity in order


  total = 0
  for product,quantity in order:
    total += catalog[product] * quantity                      \\With tuples you can have 2 arguments in an iteration//
  return total


  total = []
  for product,price in catalog.items():                       \\.items uses both values of a dictionary, assigning the first argument to the first value and the second argument to the second value//
    for orderp,quantity in order:
      if product == orderp:
        total.append(quantity * price)
  return sum(total)


Question 7
---------------------------------------------
def q7(filename):
     
    TLO: 112-SCRPY005, LSA 1
    Given a filename, open the file and return the length of the first line 
    in the file excluding the line terminator

  with open(filename) as fp:
    x = fp.readline()
    y = len(x) - 1
    return y

  with open(filename) as fp:
    return len(fp.readline()) - 1

Question 8
--------------------------------------------
def q8(filename,lst):
    
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY005, LSA 1
    Given a filename and a list, write each entry from the list to the file
    on separate lines until a case-insensitive entry of "stop" is found in 
    the list. If "stop" is not found in the list, write the entire list to 
    the file on separate lines

  with open(filename, 'w') as fp:
    for item in lst:
      if item.lower() == 'stop'
        break
      fp.write(f'{item}\n')                                \\f' is the same as .format//




Question 9
---------------------------------------------
def q9(miltime):
    
    TLO: 112-SCRPY003, LSA 1
    Given the military time in the argument miltime, return a string 
    containing the greeting of the day.
    0300-1159 "Good Morning"
    1200-1559 "Good Afternoon"
    1600-2059 "Good Evening"
    2100-0259 "Good Night"

  if miltime >= 0301 (if not working 0o0301 or 301) and miltime < 1200:
    return "Good Morning"
  elif miltime >=1200 and miltime < 1600:
    return "Good Afternoon"
  elif miltime >= 1600 and miltime < 2100:
    return "Good Evening"
  elif miltime >= 2100 or miltime < 0o0300:
    return "Good Night"


Question 10
---------------------------------------------
def q10(numlist):
    
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1
    Given the argument numlist as a list of numbers, return True if all 
    numbers in the list are NOT negative. If any numbers in the list are
    negative, return False

  for i in numlist:
    if i < 0:
      return False
    return True









































