Student Guide - https://os.cybbh.io/public/os/latest/index.html
Get into Windows system - xfreerdp /u:student /v:10.50.43.194 -dynamic-resolution +glyph-cache +clipboard
Ops Machines - https://vta.cybbh.space/
CTFd Domain - http://10.50.24.129:8000
CTFd Credentials - CRWA-M-507
Stack Login - xfreerdp /u:andy.dwyer /v:10.50.21.203 -dynamic-resolution +glyph-cache +clipboard
Stack Information - Stack #2 (10.50.21.203)
Workstations - Replace XXs with stack number (2)
Credential Information - Admin(andy.dwyer:BurtMacklinFBI)
Test
------
10.50.45.82 (Linux)
10.50.25.126 (Windows)
student
password

Windows Persistence Mechanisms
-----------------------
Profiles
Run keys
Services
Scheduled Tasks
Registries

Linux Persistence Mechanisms
-----------------------
/etc/profile
~./bashrc
Linux Daemons
Orphan processes
Cronjobs - /var/spool/cron, /etc/cron.d, /etc/crontab

Day 1 Notes (PowerShell)
%%%%%%%%%%%%%%%%%%%%%%%
Find version using PowerShell
get-host | select-object Version

Processes details
----------------------
start-process <name>
(get-process <name>).kill() \\Kills the specified process//
stop-process -name <name> \\Kills the specified process//
get-process | get-member | where-object {$_.membertype -match "method"} \\Gets all processes and member types that are methods//
get-process | get-member | where-object {$_.membertype -match "property"} \\Gets all processes and member types that are properties//
get-process | get-member | where-object {$_.membertype -eq "property"} \\Gets all processes and member types that are only properties//
get-process | select-object name, id, path | Where-object {$_.id -lt '1000'} \\Gets all processes, names, ids, and paths that have IDs less than 1000//
(get-process | select-object name, id, path | Where-object {$_.id -lt '1000'}).count \\Prints how many the command will show when run//

CIM (Common Information Modules) Classes
---------------------
Grouping like or similar things, high level database that interacts with the system, groups together different parts of the system, hardware components get grouped together into the same groups
Instances are the individual objects of the class, 5 different hard drives attached, instances are the C: D:, etc. drives

get-ciminstance -classname win32_logicaldisk \\Gets the instance information for the hard drives, in this case only the C: drive is shown//
get-cimclass * \\Shows all//
get-ciminstance -classname win32_logicaldisk -filter "drivetype=3" \\Filters the instances and only shows the instances with a drive type of 3//
get-ciminstance -class win32_bios \\Shows the bios information for the device//
get-wmiobject -class win32_bios \\Exact same output as the line above but using a different command// \\WMI is only on windows, CIM is on almost all types of operating systems//

Execution Policy
----------------
get-executionpolicy -List \\Lists all of the Execution policies of the users of the machines// \\Unrestricted, undefined, etc.//
Different execution policies are AllSigned, Bypass, Default, RemoteSigned, Restricted, Undefined, Unrestricted
set-executionpolicy -ExecutionPolicy <policy> -Scope <user> \\Changes the execution policy of the user that is defined and sets it to the policy named//

Persistence \\If persistence is mentioned write it down//
-------------------
Profiles
-----------
$Profile \\Location of the profile variable// \\Current User, Current Host//

All Users, All Hosts                $PsHome\Profile.ps1
All Users, Current Host             $PsHome\Microsoft.PowerShell_profile.ps1
Current User, All Hosts             $Home\[My]Documents\Profile.ps1
Current User, Current Host          $Home\[My ]Documents\WindowsPowerShell\Profile.ps1

All of these files are scripts, must be set in order to be run

test-path -Path $profile.currentusercurrenthost \\Returns true if it has been set and false if it has not//
test-path -Path $profile.currentuserallhosts    \\||//
test-path -Path $profile.allusersallhosts       \\||//
test-path -Path $profile.alluserscurrenthost     \\//

new-item -ItemType file -Path $profile -Force \\Forcefully creates the $profile .ps1 file in C:\users\<user>\Documents\WindowsPowerShell

set-alias -name ip -value get-nettcpconnection \\Putting this into $profile .ps1 will make the alias persistent to the profile, everytime the user logs in the alias command is run//
A known target for the adversary to try and access to gain access to our infrastructure
PERSISTENCE LOCATION

Windows Remoting
-------------------------
Get-PSSessionConfiguration \\Displays permissions//

get-item wsman:\localhost\Client\TrustedHosts \\Query configuration for wsman which is used for remoting//
set-item WSman:\localhost\Client\TrustedHosts -value "file-server"
get-item WSman:\localhost\Client\TrustedHosts \\Checks to ensure that file-server was set//
set-item WSman:\localhost\Client\TrustedHosts -value "domain-controll" -Concatenate \\Gives access to the domain controller//

invoke-command -ComputerName file-server {get-service} \\Using an ip address in this location, the command will not authenticate properly with Kerberos// \\Does not directly remote into the system, sends a command to the system and securely gives the results back to the machine that is invoking the command to the third party machine//
Can use the above command with multiple systems by putting a comma between the computernames when using the command

invoke-command -ComputerName file-server, domain-controll {get-service} -asjob \\Runs command in the background so it does not hold the powershell application hostage and allows for other work to be done while the command is acquiring the results//
receive-job <ID> \\Gives results of the job that was set in the background//

Remotes into the system
----------------
$sess=New-PSSession -ComputerName file-server -Credential <username>
enter-pssession $sess \\Allows for us to directly access the machine//

Interactive logon versus the invoke-command being non-interactive

Download a File with PowerShell
-------------------
$url = "http://downloads.volatilityfoundation.org/releases/2.6/volatility_2.6_win64_standalone.zip"
$output = "$PSScriptRoot\volatility_2.6_win64_standalone.zip"
$start_time = Get-Date
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
(New-Object System.Net.WebClient).DownloadFile($url, $output)

Windows Powershell Flag
start2347
Powershell Profiles Flag
start85678

Day 2
%%%%%%%%%%%%%%%%%%%%%%
Windows Registry and Windows Alternate Data Streams
----------------------
Constantly being used and referenced, includes location, information, settings, options, and other value for programs and hardware installed
Allows easy access to persistence
Programs are unable to start themselves, they must be told to be launched
Things can hide in plain sight in the registry because people do not look at it a lot and are scared of it

Get-Item and Get-ItemProperty are very similar
Set-ItemProperty

Persistence
---------
Run keys
(persistence mechanisms, launch mechanisms)

Registry Structure
---------
Keys - known as Registry Hives and can contian subkeys and values
Subkeys - can contain subkeys and values
Values - contain data in specific formats

A registry hive is a group of keys and their associated values that are loaded when the system is started or specific user logs in
5 Registry Hives
-----
HKEY_LOCAL_MACHINE - hardware, SAM, security, and system
HKEY_USERS - environment settings, SIDs
HKEY_CURRENT_USER - copy of current logged in user's SID

(Not Important for class)
HKEY_CURRENT_CONFIG - symbolic link to HKLM\SYSTEM\CurrentControlSet\HardwareProfiles\Current
HKEY_CLASSES_ROOT - HKEY_LOCAL_MACHINE\Software\Classes

Important Locations
---------------
HKLM\SAM                           SAM, SAM.LOG
HKLM\SECURITY                      SECURITY, SECURITY.LOG
HKLM\SOFTWARE                      software, software.LOG, software.sav
HKLM\SYSTEM                        system, system.LOG, system.sav
HKLM\HARDWARE                      (Dynamic/Volatile Hive)
HKU\.DEFAULT                       default, default.LOG, default.sav
HKU\SID                            NTUSER.DAT
HKU\SID_CLASSES                    UsrClass.dat, UsrClass.dat.LOG

To get registry 
Get-ChildItem HLKM:\SOFTWARE\Microsoft\Winows\CurrentVersion
Get-Item HLKM:\SOFTWARE\Microsoft\Winows\CurrentVersion\Run
New-Item HLKM:\SOFTWARE\Microsoft\Winows\CurrentVersion\Run\Gooditem -force
New-ItemProperty HLKM:\SOFTWARE\Microsoft\Winows\CurrentVersion\Run\Gooditem -Name "%USERPROFILE%Downloads/test-document.doc" -PropertyType Binary -Value ([byte[]](0x30,0x31,0xFF)) (creates new calue in \TrustRecords key)
New-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run -Name Test -PropertyType String -Value C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe (creates new value in \Run)

Set-MpPreference -DisabledRealTimeMonitoring $TRUE (Disable Windows Defender Real Time Protection)

new-item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe" (Creates a new registry key using New-Item)
New-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe" -Name ddebugger -Type String -value C:\Windows\System32\cmd.exe

Sysinternals
-----------
net use * http://live.sysinternals.com (creates a network share to sysinternals)

./autoruns.exe
Type *autoruns -accepteula*

PSDrives
-----------
Data store location that you can access like a file system
A PSDrive creates a temporary or permanent way for PowerShell to navigate the registry
Get-PSDrive
Creating a PSDrive requires 3 parameters (Name, PSProvider, and Root)

gci Env: (shows all the environmental variables)

new-psdrive -name HKU -PSProvider registry -root HKEY_Users
cd HKU:
Directly access HKey_Users

new-psdrive -name Desktop -psprovider filesystem -root C:\users\andy.dwyer\Desktop
new-psdrive -name FilerServer -PSProvider FileSystem -root "\\file-server\warrior share"

Alternate Data Streams
----------------
Purpose of ADS is metadata for files
Can be utilized to do malicious things
If the ADS is changed the MD5 does not change

PowerShell version of ADS
---------
echo <String> > <file>
gci <file>
get-content <file>
set-content <file> -value <string> -stream secret.info

get-content stays the same
gci also stays the same

Look at Data Streams
--------
get-item <file> -stream *
get-content <file> -stream secret.info

Day 3 Linux Essentials
------------
Filesystems
%%%%%%%%%
Hierarchy
root directory is /
Essential user commands in /bin
User directories in /home
Host specific system configurations in /etc
Variable data files in /var

/etc/passwd - user information
/etc/shadow - passwords
/etc/group - group information

Day 4 Boot Process
-------------
Windows Boot Process
%%%%%%%%
First step after power on is POST (Power on self test) (Checks to make sure hardware is all properly powered on)
Second step is BIOS/UEFI (Basic Input Output System) (Unified Extensible Firmware Interface)
Third Step MBR/Boot Manager (BIOS uses MBR)
Fourth step is Winload.exe or winload.efi based on BIOS or UEFI (winresume.exe is what runs when computer is in sleep mode)
Fifth is the ntoskrnl (ability to run all the kernels)
Sixth is smss.exe (system manager subsystem)
Seventh is csrss.exe (client/server runtime subsystem)

BIOS and UEFI
-------------
Hard drive capacities (BIOS 2 TB, UEFI 9 ZB or 9 billion TB)
RootKits
--------
Firmware, driver, bootkits, and kernel rootkits
Firmware rootkit can replace the BIOS/UEFI on the system
Bootkits replace bootloader 
Kernel rootkits replaces kernel 
Driver rootkit replaces the driver

bcdedit | findstr /i winload (check if system is using BIOS or UEFI, BIOS has .exe, UEFI has .efi)

LocalSystem is the high level non-interactive account on a computer
Mitre Attack Framework

User subsystem session 0
------------------------
Smss.exe - Installs the Win32 subsystem kernal and user mode components (win32.sys and csrss.exe
csrss.exe - supports process/thread creation and management
wininit.exe - marks itself as critical, initializes the Windows temp directory, loads the rest of the registry and starts user mode scheduling
lsm.exe - Local Session Manager handls all session of a system (remote and local)
lsass.exe - Local Security Authority Subsystem provides user authentication services, manages the local security policy, and generates access tokens
services.exe - Services Control Manager loads AutoStart services, using LSASS to authenticate if they run as something other than System

bcdedit good to have but will never use
Identifier will tell bcd what data source to use

Export to a file
bcdedit /export C:\<File>

Modify Description
bcdedit /set {<identifier>} description "Description"

Creating a Partition
---------
bcdedit /create {ntldr} /d "Windows XP Pro SP2"
Specify the Partition
bcdedit /set {ntldr} device partition=C:
Specify path to ntldr
bcdedit /set {ntldr} path \ntldr
Specify the Display Order
bcdedit /displayorder {ntldr} /addfirst

Deleting a Partition
------
bcdedit /delete {ntldr} /f

Deleting safeboot value
-------
bcdedit /deletevalue {current} safeboot

Add minimal safeboot value
-------
bcdedit /set {current} safeboot minimal

Linux Boot Process
-------------------
BIOS and UEFI
BIOS - MBR
UEFI - GPT

Bootloaders
----------
Master Boot Record (MBR)
GUID Partition Table (GPT)

lsblk - show boot devices
view mbr - sudo xxd -l 512 -g 1 /dev/vda

sudo dd if=/dev/vda of=mbrcopy bs=512 count=1 - copy MBR

GRUB - "boot selection screen" (decides what to boot and where from)

ltrace -S cat /etc/passwd (shows all system calls in Linux)
ltrace -S lsmod (shows modules in Linux)

Windows Process Validity
--------------------
Validating a process or other files and system specifc components

Why important?
-----------
Protection and detection
Also to prevent detection from our own side

User Access Control
--------------
Administrator pop up when trying to execute escalated programs
Red - Bad
Yellow - Maybe bad

Sysinternals
----------
net use * http://live.sysinternals.com

Linux Process Validity
-------------------
top - real time process listing command
htop - better real time process listing command (F5 to make it a tree)
ps -elf --forest (tree)
systemctl list-units

Crontab syntax/layout 
Minute Hour Date Month Day
mmhhDDMMdd

Windows Auditing and Logging
--------------
Artifacts
Get-LocalUser | select name,sid (Local Users)
get-wmiobject win32_useraccount | select name,sid (All users)



The GUID represents a particular file extension.
CEBFF5CD-ACE2-4F4F-9178-9926F41749EA A list of applications, files, links, and other objects that have been accessed
F4E57C4B-2036-45F0-A9AB-443BCFE33D9F Lists the Shortcut Links used to start programs

Find Executable Executions
Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\(GUID)\Count"
Output is encoded in ROT13

Find 
Shortcut Execution
Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\(GUID)\Count"
Encoded in ROT13

All Users
Get-ItemProperty "Registry::Hkey_Users\*\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\(GUID)\Count"

get-computerinfo | select osname,osversion (to find osversion and name)

get-item HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings\* (1809 and newer)
get-item HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\UserSettings\* (1803 and below)

get-itemproperty HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings\(SID)

Recycle Bin
--------------------
Get-ChildItem 'C:\$RECYCLE.BIN\' -Recurse -Verbose -Force | select FullName

Get-Content 'C:\$Recycle.Bin\(SID)\(file)' (Shows content of the file)

Linux Auditing and Logging
--------------------
Logging
------
A record of performance, events, or day-to-day activities
Logging Daemons
--
syslogd or journald
Syslogd - Standard System Logging Protocol
Journald - unique to systemd distributions of Linux
Both stored in /var/log

Syslog Daemon
------
Stored in /var/log, configured using /etc/rsyslog/

facility.severity  /path/to/log/location
Facility is the source or event
Severity is how urgent an event is, up to 7, 0 being the the most urgent
path is where the log is stored

/var/log and /etc/rsyslog
all logs are in /var

Memory Analysis
---------------
mfind, mcat, mls

Test Review
--------------------------------------------------------------------------
http://10.50.20.125:8000
Username : CRWA-M-507

All questions will have context clues so dont be a moron

Windows
####
Network Connections
----
Get-NetTCPConnection
netstat -ano (-anob)
GUI Version (TCPView (TCPView))
Suspicious ports - Consecutive numbers, Repeated numbers, patterns

Registry
----
RunOnce
Run
RegEdit
Reg Query

Processes
----
Get-Process
tasklist
ProcMon
Task Manager
Suspicious Processes - programs not running out of the appropriate directory, slightly misspelled process names

Powershell
----
Persistence - Powershell Profiles, Registry Run Keys, Scheduled Tasks
SysInternals - Autoruns
Artifacts - Evidence of activity left behind after, "bread crumbs"
    BAM, user assist, jump list (windows auditing and logging)
Commands - Get-ChildItem, Get-Item, Get-Property, Get-ItemProperty

Scheduled Tasks
----
$profile
$psprofile

All Users, All Hosts


Linux
####
Network Connections - netstat -ano (-anop) (-ltup)
Suspicious Ports - Consecutive numbers, Repeated numbers, patterns
Processes - ps -elf, top, htop
Suspicious Processes - programs not running out of the appropriate directory, slightly misspelled process names

Persistence 
----
/etc/profile
/.bash_profile
Cronjobs - System (/etc/crontab), User (/var/spool/cron/crontabs/)
~/.bashrc
/etc/inittab

Escalation
----
sudo

View Permissions
----
ls -l

IANA Ports

























