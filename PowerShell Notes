PowerShell Notes
##########################
command to get into windows system
xfreerdp /u:student /v:10.50.43.194 -dynamic-resolution +glyph-cache +clipboard

STUDENT GUIDE
#############################################################################

Getting Help
--------------------
Command 	Description

Get-help       Displays help

man            Same as get-Help

cmd /c help    Display cmd commands

Cmdlet Syntax
---------------------
-          Indicates a parameter
<>         Indicates Arguments
[]         Argument accepts multiple values

Aliases
---------------------
Command          Description
Get-Alias        Display full list of aliases
set-alias        Creates new alias
del-alias        Deletes the alias

Variables
--------------------
Command                    Result
$var1 = <value>            $var1 = 10
$var2 = <value>            $var2 = 20
$var3 = $var1 + $var2      $var3 = 30
Get-Variable               Lists automatic variables
dir variable               same as Get-Variable
dir env                    Lists environmental variables

Automatic Variables
--------------------
Variable 	             Description

$False                 False

$True                  True

$Null                  Empty value

$$                     Last Token used

$?                     Execution status of last operation

$^                     First Token in last line received

$_ or $PSItem          Object in current pipeline

$Args                  Array of undeclared parameters and/or values

$Error                 Most recent error

$Home                  full path of user’s home directory

$Host                  Current host application

$Input                 Enumerator that enumerates all input passed to a function

$LastExitCode          exit code of the last Windows-based program that was run

$Matches               Hash Table of RegEx matches

$PID                   PID of current PS session

$Profile               Full path of current user and host application

$PSVersionTable        Details about Windows PowerShell

$PSHome                the full path of the installation directory for PowerShell

$Pwd                   Full path of current directory

Data Types
-----------------------
Data Type 	    Description

[string]        Fixed-length string of unicode characters

[char]          16-bit unicode character

[byte]          8-bit unsigned character

[int]           32-bit signed integer

[long]          64-bit signed integer

[single]        32-bit floating point number

[double]        64-bit floating point number

[datetime]      Date and Time

[array]         array of values

Getting Data Types
-----------------------
Command 	                   Result

("Hello").gettype().name     String

(77.564).gettype().name      Double

(0xFF).gettype().name        Int32

Casting
------------------------
Command 	      Result

[int](5.5)      6

[float](5.5)    5.5

[int](0xFF)     255

Arrays
------------------------
$myarray = 'Hello', 12, (Get-Date), $true, 77.65
$myarry.count     5
$myarray[0]    Hello
$myarray[-1]    77.65
$myarray += 'new element'

Multidimensional Arrays
------------------------
$multiarray = @((1,2,3,4),(5,6,7,8))
$multiarray[0][1]    2
$multiarray[1][3]    8
$nonjaggedarray = New-Object "int32[,]" 2,4
$nonjaggedarray[0,1] = 2
$nonjaggedarray[1,3] = 8
$nonjaggedarray[0,1]    2
$nonjaggedarray[1,3]    8
$multiarray = @(); $multiarray += , @(1,2,3)

The Pipeline
-----------------------
Cmdlet 	Description

Compare-Object        Compares two objects and marks their differences

ConvertTo-Html        Converts object into HTML

Export-Csv            Saves object in a csv file

ForEach-Object        Returns each pipeline object one after the other

Format-List           Outputs results as a list

Format-Table          Outputs result as a table

Format-Wide           Outputs results in several columns

Get-Unique            Removes duplicates from a list of values

Group-Object          Groups results according to a criterion

Measure-Object        Calculates the statistical frequency distribution of object values or texts

Out-File              Writes results to a file

Out-Host              Outputs results in the console

Out-Null              Deletes results

Out-String            Converts results to plain text

Select-String         Filters properties of an object and limits number of results as requested

Sort-Object           Sorts results

Tee-Object            Copies the pipeline’s contents and saves it to a file or a variable

Where-Object          Filters results according to a criterion

Pipeline Examples
------------------------
gci *.txt | ?{$_.length -lt 100} | ft name
ps | ft PSResources
ps | gm -Membertype PropertySet
gs | Group Status
gci | Sort Length, Name -descending
gs | ?{$_.status -eq "Running"}
gci | Sort Length -descending | Select -first 5
ps | Sort StartTime | Select -first 5 | ft ProcessName, StartTime
1,2,3,1,2,3,1,2,3,1,2,3 | Sort | Get-Unique
gci | Measure-Object Length
gcm -Type Cmdlet | %{$_.Parameters} | %{$_.Keys} | group -NoElement | Sort Count, Name -Descending | Select -Skip 11 | ?{$_.Count -gt 1} | Out-Gridview

Comparison Operators
------------------------
Operator 	Description

-eq            Equals

-ne            Not Equal

-gt            Greater Than

-lt            Less Than

-ge            Greater Than or Equal To

-le            Less Than or Equal To

-contains      Contains (used for a collection of items)

-match         Matches anywhere in the string

-like          Both sides of expression are identical

-in            Returns true when value is contained within a collection

-replace       Replaces a string pattern

-is            Returns true if both objects are the same type

Loops
-------------------------
While Loop
#########################
$x = 0
while($x -lt 10) {
  Write-Host $x
  $x++
}

Do While
########################
$x = 0
Do {
  Write-Host $x
  $x++
}while($x -lt 10)

Do Until
########################
$x = 0
Do {
  Write-Host $x
  $x++
}until($x -gt 10)

ForEach Loop
########################
$teams = "Lions", "Tigers", "Red Wings", "Pistons"
ForEach($team in $teams){
  $team.insert(0, "Detroit ")
}

ForEach-Object
########################
gci | % -process {$_.Length / 1024}

Conditional Statements
------------------------
If/Else
########################
$x = 6
if ($x -le 5) {
  Write-Host "Less than 5"
} else {
  Write-Host "Greater than 5"
}

If/Elseif/Else
#########################
$x = 5
if ($x -lt 5) {
  Write-host "Less than 5"
} elseif ($x -eq 5) {
  Write-Host "It is 5"
} else {
  Write-Host "Greater then 5"
}

Switch
#########################
$time = 12
Switch($time) {
  6 {"Morning"; break}
  12 {"Noon"; break}
  18 {"Evening"; break}
  22 {"Night"; break}
}

Flow Control
--------------------------
Break
##########################
$x = 0
while($x -lt 10) {
  $x += 1
  if($x -eq 5) {break}
  Write-Output $x
}

Continue
##########################
$x = 0
while($x -lt 10) {
  $x += 1
  if ($x -eq 5) {continue}
  Write-Output $x
}

RegEx
-----------------------------
Escape Sequence 	Special Characters

`n                New Line

`t                Tabulator (Tab)

`b                Backspace

`’                Single Quotation Mark

`"                Double Quotation Mark

`0                Null

``                Backtick Character

Placeholders
-----------------------------
Placeholder 	Description

.              Any character except newline

[^abc]         All characters except one specified

[^a-z]         All characters expect ones in range specified

[abc]          One of the characters

[a-z]          One of the characters in range

\d             Any number [0-9]

\D             Any non-number

\n             Line Break

\r             Carriage return

\s             Any whitespace (space, tab, new line)

\S             Any non-whitespace

\t             tab

\w             Letter, number or underline

\W              Non-letter, number, or underline

Quantifiers
---------------------------
Quantifier 	Description

*           Any

?           None or one occurrence

{n,}        At least n occurrences

{n,m}       At least n occurrences, maximum m occurrences

{n}         Exactly n occurrences

+           One or many occurrences

Anchors
------------------
Anchor 	    Description

$           End of text

^           Start of Text

\b          Word boundary

\B          No word boundary

\G          After last match

String Operators
-------------------------------
Operator 	  Definition

-f          Format String Expression

-replace    replaces strings

-split      Splits a string

-join       Joins multiple strings

String Methods
------------------------------
Method 	           Definition

.Split()           splits strings

.Replace()         replaces strings

.StartsWith()      Determines whether this string instance starts with the specified character.

.EndsWith          Determines whether the end of this string instance matches the specified character.

.ToLower()         Convert string to lower case

.ToUpper()         Convert String to upper case

Functions
-------------------------------
Basic Function
--------------
function get-sum($num1, $num2) {
  $num1 + $num2
}
get-sum 5 5

Function with Optional Parameters
--------------
function get-test {
  param($parm1='some value', $parm2='some value')
  "The value $parm1 and $param2 are parameters"
}

Function with Mandatory Parameters
--------------
function get-test {
  param (
    [Parameter(Mandatory=$true)]
    $name
    )
    "Hello, $name"
}

Function with Help Message
--------------
function get-test {
  param(
    [Parameter(Mandatory=$true, HelpMessage='Enter your name')]
    $name
    )
    "Hello, $name"
}

Function with Strongly-Typed Mandatory Parameters
--------------
function get-conversion {
  param(
    [Parameter(Mandatory=$true, HelpMessage='Enter weight')]
    [Double]
    $pounds
    )
    $kilos = $pounds * (1/2.2)
    $kilos
}

Function with Switch Parameter
---------------
function get-switch {
  param(
    [Switch]
    $special
    )
    if ($special) {
      'This is the switch'
    } else {
      'This is not the switch'
    }
}

Advanced Function
-----------------
function Get-compinfo {
  [CmdletBinding()]
  BEGIN {
    $name = $env:COMPUTERNAME
  }
  PROCESS {
    Write-Verbose -Message "$name"
    $system = gwmi -class Win32_ComputerSystem -ComputerName $name
    $os = gwmi -class Win32_OperatingSystem -ComputerName $name
    $bios = gwmi -class win32_BIOS -ComputerName $name
    $properties = @{
      ComputerName = $name
      Model = $system.model
      OS = $os.caption
      SerialNumber = $bios.SerialNumber
    }
  }
  END {
    New-Object -TypeName PSobject -Property $properties
  }
}

Filter
------------------
filter namedthis {
  if )$_.name -match "file.txt") {$_}
}
gci | gc | ?{$_ | namedthis}

NOTES
##################################################################

Powershell is a wrapper for System.Management.Automation.dll
powershell is based on the .net framework
everthing is processed through system.management.automation.dll and is based on C#
Powershell is on Linux, MacOS, and Windows
We will only be using powershell on Windows devices
verb noun, tab complete, F8 to run highlighted
Many ways to complete a problem in powershell
Powershell is case insensitive
Has the ability to reach outside of itself so some commands that should not work in Powershell work
<CMDLET> <PARAMETERS> <ARGUMENTS>
Help section is on of the most important parts of PowerShell

Get-Help
--------------------------
Has all of the answers and examples of PowerShell
Most important part of PowerShell
Update-Help updates the help page
The errors in PowerShell are very pointing
PowerShell tells you what the problem is

PRETEST IS EASIER THAN THE TEST

get-help Get-Command gives help on Get-Command, goes a lot more in depth helps on any arguments and parameters
Argument in [] means it is a mandatory argument, if not in [] then it is not a mandatory argument
get-help get-command -showwindow will open a seperate window with the help page
get-help get-command -onlne will take you to the online help page (Gunny's go to)
get-help *net* (will give all help options that include net anywhere in the name)

about pages
get-help about_* provides more information about the specific thing clarified

Aliases
-----------------------------
Get-ChildItem (gci, dir, ls)
Get-Alias -Definition Get-ChildItem (will show all aliases for the command displayed)
Set-Alias
Remove-Item alias:edit (removes an alias)
Aliases are not persistent

Object based-programming
-----------------------------
Characteristics and methods
what is it and what is it doing

Properties and methods
properties are what something is
methods are what something can do

(Get-Process -name noepad).kill()

Get-Process | Get-Member shows methods and properties
Get-Process | Get-Member -MemberType properties will only show properties
Get-Process | Get-Member -MemberType methods will show only methods

Get-Process | Format-Table name, id
Get-Process | Format-List *
Get-Process | Format-Table -Wrap

function fruit-host {...}
goes to the host for potential further manipulation

function fruit-output {...}
goes straight to the screen

cls
clears the screen
an alias for clear-host

variables
--------------------------
a variable is something that holds a value and can be changed
system variables and user defined variables
set by the system versus set by the user
$var = value is the proper syntax to declare a variable
user defined variables are not persistent
system variables are persistent
$true = True
$false = False
$_ or $PSItem = object in current pipeline ($PSItem is more consistent when used in functions)
$ IS ALWAYS USED
When scripting try to hard code as little as possible, variables will be your friend to help prevent hard coding
$matches = Hash table of regex matches
Call variables with a $ in front of the variables
Get-ChildItem variable:x also sets variables but in a different syntax
$x, $y, $z = "this", "that", "third" - how to set multiple variables at oncce
Remove-variable x, y, z removes all three variables

$name = "george"
"Hello my name is $name" prints out Hello my name is george
'Hello my name is $name' prints out Hello my name is $name
$hour = (Get-date).hour will set the hour to the variable of hour
The variables are not running the command that is set in the command every time, the variable is a snapshot of the command when it was last run

Environmental variables
$env:<variable> calls environmental variables

Data Types
----------------------------
Integers
Strings
Arrays
Floats
Single
Double
Bytes
Understand that you have different data types and have an understanding of what the data types are
("Hello").gettype().name       String

Gettype is useful if code is not working and youre not sure if it is reading it as the correct data type

Arrays
----------------------------
$myarray = 'Hello', 12, (Get-Date), $true, 77.65
#array = 1,2,3,4 or 1..4
$array2 = "World", "hello", 5, 10, (Get-Date)
$array3 = @()
$array[1] calls on an array at the first index value call on the last item using -1
$array[1..3] calls on an array on the range of index values

Appending an array
$a = 1..6
$a += 7,8,9

Jagged Arrays
An array inside of an array
$jagarray = "joe", "jim", "jan", (1, ('apple', 'pear'), 3), "jay"
$jagarray[1] = jim
$jagarray[3][0] = 1
$jagarray[3][1][0] = apple

Multidimensional array
Array
$TargetingArray = @(
  (35.7219, 51.3347, "Tehran")
  (39.9042, 116.4074, "Bejing")

)

Hash Tables
----------------------
Dictionary, has key and value pairs
Arrays can go into hash tables
$Mylist = @{First = "george"; last = "lucas"; mid = "yes"} creates an empty hash table
$Mylist["first"] prints out george
$Mylist.last prints out lucas
$Mylist.Keys prints out all of the keys
$Mylist.values prints out all of the values

$Mylist will print the hash table
$Mylist[$Mylist.keys] prints all of the values
$mylist.date = Get-Date
$mylist["Location"] = "Germany" will add the Location = Germany to the hash table
$mylist.name() manipulates the name
$mylist.remove() removes the key

Practical Exercise Variables
--------------------------------
Create a variable called "var1" that holds a random number between 25-50.

Create a variable called "var2" that holds a random number between 1-10.

Create a variable called "sum" that holds the sum of var1 and var2.

Create a variable called "sub" that holds the difference of var1 and var2.

Create a variable called "prod" that holds the product of var1 and var2.

Create a variable called "quo" that holds the quotient of var1 and var2.

Replace the variables in text with their values in the following format:

    "var1" + "var2" = "sum"

Replace the variables in text with their values in the following format:

    "var1" - "var2" = "sub"

Replace the variables in text with their values in the following format:

    "var1" * "var2" = "prod"

Replace the variables in text with their values in the following format:

    "var1" / "var2" = "quo"

$var1 = Get-Random -Minimum 25 -Maximum 50
$var2 = Get-Random -Minimum 1 -Maximum 10
$sum = $var1 + $var2
$sub = $var1 - $var2
$prod = $var1 * $var2
$quo = $var1 / $var2
Write-Output "$var1 + $var2 = $sum"
Write-Output "$var1 - $var2 = $sub"
Write-Output "$var1 * $var2 = $prod"
Write-Output "$var1 / $var2 = $quo"

Alternate method
Write-Host "$var1 + $var2 = $sum
"{0} + {1} = {2}" -f $var1, $var2, $sum

Practical Exercise Reverse Arrays
---------------------------------
Create an array containing a range with a random starting and stopping point. The starting point will be a random number from -10 through 0. The ending point will be a random number from 1 through 20.
Create a variable that contains the contents of the array in reverse

$min = Get-Random -minimum -10 -maximum 0
$max = Get-Random -minimum 1 -maximum 20
$array = @($min..$max)
$array2 = @($max..$min)

Alternate Method
[array]::Reverse($array)


Practical Exercise Arrays & Hash Tables
--------------------------------
Create two empty hash tables with the following names:
    employee1
    employee2

Now add a new key called Username which holds a contraction of the employee’s first initial then last name then ID. (i.e. mhopper001).
Mary got promoted to "Software Lead" so the job key for Mary needs to be changed to "Software Lead"
Create a new hash table called "employee3" that contains the following values with the respective keys.

Add a new key called "Status" that holds the values:

$employee1 = @{First = "Mary"; Last = "Hopper"; ID = "001"; Job = "Software Developer"}
$employee2 = @{First = "John"; Last = "Williams"; ID = "002"; Job = "Web Developer"}
$employee1["Username"] = "mhopper001"
$employee2["Username"] = "jwilliams002"
$employee3 = @{First = "Alex"; Last = "Moran"; ID = "003"; Job = "Software Developer"}
$employee1["Status"] = "Management"
$employee2.add("Status", "Intermediate")

To sort the items in the order that you input them in use $employee1=@{[ordered]}

Practical Exercise The Pipeline
-------------------------------
Display the start time of the earliest and latest running processes
Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
Identify a cmdlet that displays a list of installed hotfixes.
Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.

$a = (Get-Process | select Name,StartTime | sort -Property Starttime | select -First 2 -Last 1)
Write-Output $a
$b = (Get-Date).DayOfWeek
Get-HotFix | Sort-Object -Property Description | Select-Object -Property Description,InstalledOn,HotFixID

Use Get-Member to find properties and other shit

Day 2
################################################
Script Blocks
--------------------
Putting something that it will do everytime you call it, like a variable but can change on the fly
$date = {(get-date).Second}
& $date (call a script block)

Script blocks do not work like variables, cannot add them due to no consistent value
$a = 1
$b = {1+1}
$a += $b (will not run)
$a += & $b (will run)

alternate
$a += invoke-command $b

Sorting and grouping
----------------------
Get-ChildItem | Sort-Object -Property Extension | Format-Table -GroupBy Extension (sorts and gorups all of the items included in the search by what file extension they have attached)
If sorting and then grouping all of them will be in the same long list but seperated by extension
If grouped and not sorted then it will print out a bunch of groups of file extensions without sorting them

Get-Service | Group-Object Extension | Sort-Object Count -Descending (counts the amount of the extensions and lists them and sorting them by the most extensions

Where-Object
----------------------
Get-Service | Where-Object{$_.status -eq 'running'} (shows current running services) $_ = current pipeline 
Get-ChildItem *.txt | Where-Object{$_.Length -gt 100} (checks for text documents with more than 100 bytes of data)
Get-Process | Where-Object {$_.Company -like 'micro*'} | Format-Table Name, Description, Company (will get all processes that start with micro and format into Name - Description - Company)

-like accepts wildcards when using comparison operators
-match uses regex when using comparison operators

Get-ChildItem | Measure-Object Length (shows the number of files)
(Get-ChildItem).count (counts all objects in the search area, including directories)

Create Custom Objects
----------------------
$MyTruck = New-Object Object
()
Add-Member -MemberType NoteProperty -Name Color -Value Red -InputObject $MyTruck
Add-Member -MemberType Note Property -in $MyTruck -Name Make -Value Ford
Add-Member -InputObject $MyTruck NoteProperty Model "F-150 Raptor"
$MyTruck | Add-Member NoteProperty Cab SuperCrew
()
All of these do the same thing

Add-Member -MemberType ScriptMethod -InputObject $MyTruck -Name Drive -Value { "Going on a roadtrip" }

$Soldier = [PSCustomObject}@{
  "FirstName"      = "Joe"
  "LastName"       = "Snuffy"
  "MilitaryRank"   = "SSG"
  "MOS"            = "17C"

Practical Example Custom Object
------------------------
Create a custom object that contains information about the host system using the following:
    Win32_ComputerSystem
    Win32_BIOS
    Win32_OperatingSystem
    Win32_LogicalDisk
    Use the cmdlet Get-WmiObject to obtain the needed information

The final output of this exercise should look like the following:
ComputerName    : DESKTOP-5KJDVS2
OperatingSystem : Microsoft Windows 10 Pro
Version         : 10.0.17134
Manufacturer    : Dell Inc.
Disks           : {\\DESKTOP-                          5KJDVS2\root\cimv2:Win32_LogicalDisk.DeviceID="C:",
                  \\DESKTOP-5KJDVS2\root\cimv2:Win32_LogicalDisk.DeviceID="D:"}

$compinfo = Get-WmiObject Win32_ComputerSystem
$osinfo = Get-WmiObject Win32_OperatingSystem
$biosinfo = Get-WmiObject Win32_BIOS
$diskinfo = Get-WmiObject Win32_LogicalDisk

$myobject = New-Object -TypeName psobject

$myobject | Add-Member -MemberType NoteProperty -Name ComputerName -Value $compinfo.Name
$myobject | Add-Member -MemberType NoteProperty -Name OperatingSystem -Value $osinfo.Caption
$myobject | Add-Member -MemberType NoteProperty -Name Version -Value $osinfo.Version
$myobject | Add-Member -MemberType NoteProperty -Name Manufacturer -Value $biosinfo.Manufacturer
$myobject | Add-Member -MemberType NoteProperty -NameDisks -Value $diskinfo._path

Comparison Operators
--------------------------
-contains - used for a collection of items
-match - matches anywhere in the string (uses RegEx)
-like - both sides of the expression are identical
-in - returns true when value is contained within a collection
-replace - replaces a string pattern
-is - returns true if both objects are the same type
-ne - not equal

2 -eq 2 (returns True)
1,2,3 -eq 2 (returns 2)
1,2,3,2 -eq 2 (returns 2 2)
2 -eq 1,2,3 (returns False)
2 -ne 1,2,3 (returns True)

"PowerShell" -like "*shell" (returns True)
"PowerShell", "Server" -like "*shell" (returns PowerShell)
"PowerShell", "Server" -notlike "*shell" (returns Server)

$text = 'Here is the model number: MO5364'
$pattern = 'MO(\d{3})'
$text -match $pattern (returns True)

$Matches (returns matches in the code)

$fruit = 'apple', 'orange', 'pear', 'tomato'
$fruit -contains 'tomato' (returns True)

$num = 5
(($num -gt 1) -and ($num -lt 10)) (returns True)

Conditionals
--------------------------
if (condition) {

}

if($x -gt 10){"$x is larger than 10"}
  else{
    "$x is smaller than 10"
      }

$num = (Get-Random -Minimum 0 -Maximum 10)
if($num -lt 5) {
       "$num is less than 5"
}
elseif($num -eq 5) {
        "$num is exactly 5"
}
else {
        "$num is greater than 5"

A switch is used like a main menu screen, whichever option you pick the results show

Loops
-------------------
$nums = 1,2,3,4,5
$num | ForEach-Object{$_*2} (returns 2,4,6,8,10)

ForEach ($item in gci C:\ -recurse){$item.name}

While loops
------------------
while $num -let 3)
    $num
    $num++
    }

do { 
  code black
code wile(conditoions)

for loops
-------------------
for(initialization; condition; increment)
{
    code block to be executed
}

Practical Exercise Comparison and Condition
-----------------------
Find and extract the model number from the provided lines of text. If there isn’t a model number then display to the user that a model number wasn’t found
Check both lines for model numbers and report individually the line and model number if found.

Use the following variables for your script:
$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"

Must use at least ONE comparison operator
Must use at least ONE If Condition OR Switch Statement

$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$pattern = '[A-Za-z]{2}\d{2,5}' \\RegEx example//

$line1, $line2 | foreach-object {
  if ($_ -match $pattern){
    write-host $matches[0]": $_"
  }
  else{
    write-host "No matches found on: $_"
    }
}

Practical Exercise Looping and Iteration
----------------------
Part 1
  Use an array to iterate and open the following
    Notepad
    MS Edge
    MSpaint
  Query the processes
    Kill the processes from PowerShell
Part 2
  Use an array to iterate and open the following
    Notepad
    MS Edge
    MSpaint
  Query the processes
    Save the ProcessIDs to a text file called procs.txt
    Iterate through the ProcessIDs in the text file and kill them
Part 3
   Use an array to iterate and open the following
    Notepad
    MS Edge
    MSpaint
  Query the processes and display only the following information in order by process ID
    Process ID
    Process Name
    The time the process started
    The amount of time the process has spent on the processor
    The amount of memory assigned to the process

$procs = "notepad", "msedge", "mspaint"

$procs | % {start-process $_}

Get-Process

foreach($proc in $procs){
  get-process | where-object{$_.Name -like $proc} | 
  Foreach-object{Add-content $file $_.Id} }

foreach($proc in $procs){
  get-process | where-object{$_.name -like $proc}  | 
  Format-Table -property id, name, starttime, totalprocessortime, virtualmemorysize, workingset64 }

Get-Content .\procs.txt | ForEach-Object{Stop-Process $_}


$procs | ForEach-Object { Stop-Process -name $_ }





Day 3
##########################
Functions
-----------------


RegEx
-----------------
used with match, replace, split


String Manipulation
-----------------
You want to get your information in a format that you want to use it in
"text '"quotation marks'""
text "quotation marks"

$text1 = "One Terabyte is $(1TB / 1GB) Gigabytes"

"Here is '"quotes'""
"here is another `nline of text" (`n is newline) (` is the escape character)

Here Strings
----------------
Defined with @" and ends with "@

$text = @"
Here is some text with '"quotes'".
1TB equals $(1TB / 1GB) GB.
Variables are resolved
"$PWD" is your current path
"@

Prints
Here is some text with '"quotes'".
1TB equals 1024 GB
Variables are resolved
C"\windows\system32 is your current path

Get-Service | Select-Object -First 10 | ForEach-Object{"The service {0} is call '{1}': {2}" -f $_.Name, $_.DisplayName, $_.Status} (prints out the first 10 services and the display name and status of each)

"{0:n3}" - f 123.45678 (rounds to the 3rd character)
"{0:d5}" -f 123 (prints up to the 5th character)

Replacing
---------
"Hello John" -replace "John", "World" (replaces John with World)
'Server1,Server2,Server3' -replace ',', ':' (replaces the , with the :)

'[    Jon    Bon    Doe    ]' -replace '\s+', ' ' (replaces large spaces with a single space)

'192.168.0.1' -replace '\d{1,3}$', '255' (replaces the last octet with 255)

Splitting
---------
(?=\.) will split at the period and keep the period (Either a look ahead or look behind)

Joining
---------
Joins on whatever you make it join on





















































































































































































































